---
layout: post
title: Longest Palindromic subsequence
---
Given : a string S
Output : The length of the longest palindromic subsequence.

Let the length of the string be n;
S[0.n-1]

This is can solved easily using dynamic programming.

Let us define a 2D array OPT[][],
where OPT[i][j] defines the length of the longest palindromic subsequence that can formed using the substring S[i][j].

If S[i] and S[j] are equal then OPT[i][j] equals OPT[i+1][j-1]+2

else:
	OPT[i][j] = max(OPT[i+1][j],OPT[i][j-1])

<pre><code>
If S[i]==S[j]
	OPT[i][j] = OPT[i+1][j-1]+2;
else
	OPT[i][j] = max(OPT[i+1][j],OPT[i][j-1]);
</code></pre>
For example let the string be
S= "banana":
<pre><code>
		O[0][5]
	       /	\
	    O[1][5] 	 O[0][4]
	   /     \       /      \
     O[2][5]     O[1][4] O[1][4] O[0][3]
     /     \        / \    .............
  O[3][5]  O[2][4]O[2][4] O[1][3]
 /      \
O[4][5] O[5][5] ....................
</code></pre>

<pre><code>
	0  1  2  3  4  5
     0  1  1  1  3  3  5
     1     1  1  3  3  5
     2        1  1  3  3
     3           1  1  3
     4              1  1
     5	               1

For s="banana";

we have to fill the array from the bottom
</code></pre>


